# Goal: find optimal allocation of ai given r and d
library(tidyverse)
library(GGally)
# number of resources
n <- 5
# death rate of the first species
d <- 1
# death rate of the second species
d2 <- d + 0.01
# growth rate of the resources (all above d)
r <- sort(abs(rnorm(n))) + d2
# tradeoff type:
tradeoff <- "stochastic"
#tradeoff <- "unit"
tradeoff <- "pnorm"
p <- 0.5
build_vector <- function(a){
if (tradeoff == "stochastic"){
a <- abs(a) / sum(abs(a))
return(a)
}
if (tradeoff == "unit"){
a <- abs(a) / sqrt(sum(a^2))
return(a)
}
if (tradeoff == "pnorm"){
a <- (abs(a) / sum(abs(a)))
return(a^(1/p))
}
print("tradeoff not recognized")
return(NULL)
}
# Part 1: find best resident
tominimize <- function(pars){
a <- build_vector(pars)
s <- as.numeric(crossprod(a, r)) - d
b <- crossprod(a, a)
return(-s * s / b)
}
# initial guess
tmp <- list(par = (r == max(r)) * 1)
tmp <- optim(par = tmp$par, fn = tominimize, method = "Nelder-Mead",
control = list(maxit = 10000, trace = FALSE))
tmp <- optim(par = tmp$par, fn = tominimize, method = "BFGS",
control = list(maxit = 10000, trace = FALSE))
a <- build_vector(tmp$par)
print(a)
# Part 2: find best invader
# density of resident at equilibrium
x1s <- (as.numeric(crossprod(a, r)) - d)  / crossprod(a, a)
if (x1s < 0) {
print("Cannot find feasible resident!!")
} else{
negative_invasion_growth <- function(pars){
a2 <- build_vector(pars)
return(-(-d2 + crossprod(a2, r) - crossprod(a2, a) * x1s))
}
tmp <- list(par = r)
tmp <- optim(par = tmp$par, fn = negative_invasion_growth, method = "Nelder-Mead",
control = list(maxit = 10000, trace = FALSE))
tmp <- optim(par = tmp$par, fn = negative_invasion_growth, method = "BFGS",
control = list(maxit = 10000, trace = FALSE))
if (tmp$value > 0) {
print("Cannot invade")
} else {
print("Found successful invader!!")
}
a2 <- build_vector(tmp$par)
print(a2)
# Plotting
my_fn <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=lm, se = FALSE, fill="blue", color="blue", ...)
return(p)
}
dt <- tibble(a = a, a2 = a2, r = r)
show(GGally::ggpairs(dt, lower = list(continuous = my_fn)) + ggtitle(tradeoff))
}
# find number of coexisting species when starting with
# random A subject to constraints
source("L-H.R")
# choose unit or stochastic
type <- "unit" # for each row, \sum_j Aij^2 = 1
type <- "stochastic" # for each row, \sum_j Aij = 1
n <- 20
nit <- 5000
# power
p <- 1
vecnorm <- function(a){
a <- abs(a) / sum(abs(a))
return(a^(1/p))
}
# death/growth rates
d <- rep(1, n)
# note: to have p < 1 we need a huge r!
r <- 1 + d + rnorm(n) * 0.001 # add a bit of noise so H-L runs happily
results <- rep(0, nit)
for (i in 1:nit){
print(i)
# build the matrix
A <- matrix(abs(rnorm(n * n)), n, n)
A <- t(apply(A, 1, vecnorm))
B <- A %*% t(A)
k <- sum(get_final_composition(-B,  A %*% r - d) > 0)
results[i] <- k
}
library(tidyverse)
prob <- tibble(x = results)
show(ggplot(prob, aes(x=x)) + geom_bar())
